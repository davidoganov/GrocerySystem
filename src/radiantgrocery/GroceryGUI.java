/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package radiantgrocery;

import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import java.sql.*;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

class DatabaseHandler {
    private Connection conn = null;
    
    private static final String DATABASE_URL = "jdbc:postgresql://mahmud.db.elephantsql.com:5432/vtmjoabo";
    private static final String DATABASE_USER = "vtmjoabo";
    private static final String DATABASE_PASSWORD = "Ub6a9zp6qOrRe_UWPQnVZ2ymxf393JDr";

    public void connect() throws SQLException{
        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection(DATABASE_URL, DATABASE_USER, DATABASE_PASSWORD);
            System.out.println("CONNECTED");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DatabaseHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public ResultSet executeQuery(String query) throws SQLException {
        System.out.println(conn);
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        return rs;
    }

    public void close() throws SQLException {
        if (conn != null) {
            conn.close();
        }
    }
}

public class GroceryGUI extends javax.swing.JFrame {

    /**
     * Creates new form GroceryGUI
     */
    
    static DatabaseHandler dbHandler = new DatabaseHandler();
    //static Launch launch = new Launch();
    
    
    int user = 0;
    String userEmail;
    String conumber;
    String codate;
    
    
    //Month = new ClearOnFocusTextField("Month");
        
    public GroceryGUI() {
        initComponents();
        
        //Tabs.getComponentAt(0).setVisible(false);
        
        
        
        //this.setVisible(false);
        
        
        try {
            dbHandler.connect();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
        SelectRow.setVisible(false);
        ErrorL.setVisible(false);
        Launch.setVisible(false);
        
        Search.addActionListener((ActionEvent e) -> {
            String text = SearchField.getText();
            if(!text.equals(""))
                jLabel2.setText("You searched for: " + text);
            else
                jLabel2.setText(" ");
        });
        
        SearchField.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent e)
            {
                if(e.getKeyCode() == KeyEvent.VK_ENTER){
                    jLabel2.setText("You searched for: " + SearchField.getText());
                    tableSearch();
                }
            }
        });
        
        SearchField1.addKeyListener(new KeyAdapter()
        {
            @Override
            public void keyPressed(KeyEvent e)
            {
                if(e.getKeyCode() == KeyEvent.VK_ENTER){
                    promoSearch();
                }
            }
        });
    }
    
    AddInventory inventory = new AddInventory();
    
    AddPromotion newpromo = new AddPromotion();
    
    ApplyPromotion apply = new ApplyPromotion();
    
    //manualSamuel();
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tabs = new javax.swing.JTabbedPane();
        Home = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        TrendsButton = new javax.swing.JButton();
        InventoryButton = new javax.swing.JButton();
        PromotionsButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Launch = new javax.swing.JLabel();
        CartButton = new javax.swing.JButton();
        CDate = new javax.swing.JLabel();
        EditInventory = new javax.swing.JPanel();
        BackInv = new javax.swing.JButton();
        SearchField = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        ScrollPane = new javax.swing.JScrollPane();
        SearchTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        EditPromotions = new javax.swing.JPanel();
        BackProm = new javax.swing.JButton();
        SearchField1 = new javax.swing.JTextField();
        ScrollPane1 = new javax.swing.JScrollPane();
        SearchTable1 = new javax.swing.JTable();
        Search1 = new javax.swing.JButton();
        Create = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        Apply = new javax.swing.JButton();
        SelectRow = new javax.swing.JLabel();
        Revert = new javax.swing.JButton();
        ViewTrends = new javax.swing.JPanel();
        BackTrend = new javax.swing.JButton();
        CD = new javax.swing.JLabel();
        Month = new javax.swing.JTextField();
        Date = new javax.swing.JTextField();
        Year = new javax.swing.JTextField();
        Period = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        SPMost = new javax.swing.JScrollPane();
        Most = new javax.swing.JTable();
        SPLeast = new javax.swing.JScrollPane();
        Least = new javax.swing.JTable();
        Most10 = new javax.swing.JLabel();
        Least10 = new javax.swing.JLabel();
        SetDate = new javax.swing.JButton();
        Cart = new javax.swing.JPanel();
        CartPane = new javax.swing.JScrollPane();
        ItemCart = new javax.swing.JTable();
        Place = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        BackCart = new javax.swing.JButton();
        RTotal = new javax.swing.JLabel();
        CartLabel = new javax.swing.JLabel();
        Total = new javax.swing.JLabel();
        ErrorL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        Title.setText("Sales System");

        TrendsButton.setText("View Trends");
        TrendsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrendsButtonActionPerformed(evt);
            }
        });

        InventoryButton.setText("Edit Inventory");
        InventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InventoryButtonActionPerformed(evt);
            }
        });

        PromotionsButton.setText("Edit Promotions");
        PromotionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PromotionsButtonActionPerformed(evt);
            }
        });

        jButton1.setText("ManualSamuel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Mass Insert");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Launch.setText("jLabel3");

        CartButton.setText("Cart");
        CartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CartButtonActionPerformed(evt);
            }
        });

        CDate.setText("Current Date: ");

        javax.swing.GroupLayout HomeLayout = new javax.swing.GroupLayout(Home);
        Home.setLayout(HomeLayout);
        HomeLayout.setHorizontalGroup(
            HomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomeLayout.createSequentialGroup()
                .addGroup(HomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HomeLayout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addGroup(HomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(InventoryButton)
                            .addComponent(PromotionsButton)
                            .addComponent(TrendsButton)
                            .addComponent(Title)
                            .addComponent(Launch)
                            .addComponent(CartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CDate)))
                    .addGroup(HomeLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButton1)
                        .addGap(79, 79, 79)
                        .addComponent(jButton2)))
                .addContainerGap(237, Short.MAX_VALUE))
        );
        HomeLayout.setVerticalGroup(
            HomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title)
                .addGap(54, 54, 54)
                .addComponent(InventoryButton)
                .addGap(18, 18, 18)
                .addGroup(HomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PromotionsButton)
                    .addComponent(CartButton))
                .addGap(18, 18, 18)
                .addComponent(TrendsButton)
                .addGap(15, 15, 15)
                .addComponent(CDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Launch)
                .addGroup(HomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HomeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(38, 38, 38))
                    .addGroup(HomeLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jButton2)
                        .addContainerGap(47, Short.MAX_VALUE))))
        );

        Tabs.addTab("Home", Home);

        BackInv.setText("Back");
        BackInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackInvActionPerformed(evt);
            }
        });

        SearchField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        SearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        SearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchTableMouseClicked(evt);
            }
        });
        ScrollPane.setViewportView(SearchTable);

        javax.swing.GroupLayout EditInventoryLayout = new javax.swing.GroupLayout(EditInventory);
        EditInventory.setLayout(EditInventoryLayout);
        EditInventoryLayout.setHorizontalGroup(
            EditInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditInventoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditInventoryLayout.createSequentialGroup()
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SearchField))
                    .addGroup(EditInventoryLayout.createSequentialGroup()
                        .addGroup(EditInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EditInventoryLayout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(BackInv))
                        .addGap(0, 181, Short.MAX_VALUE)))
                .addContainerGap())
        );
        EditInventoryLayout.setVerticalGroup(
            EditInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditInventoryLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(EditInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BackInv)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Tabs.addTab("Inventory", EditInventory);

        BackProm.setText("Back");
        BackProm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackPromActionPerformed(evt);
            }
        });

        SearchField1.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        SearchTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        ScrollPane1.setViewportView(SearchTable1);

        Search1.setText("Search");
        Search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search1ActionPerformed(evt);
            }
        });

        Create.setText("Create");
        Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateActionPerformed(evt);
            }
        });

        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        Apply.setText("Apply");
        Apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyActionPerformed(evt);
            }
        });

        SelectRow.setText("Select a row above to apply");

        Revert.setText("Revert");
        Revert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RevertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EditPromotionsLayout = new javax.swing.GroupLayout(EditPromotions);
        EditPromotions.setLayout(EditPromotionsLayout);
        EditPromotionsLayout.setHorizontalGroup(
            EditPromotionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditPromotionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditPromotionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EditPromotionsLayout.createSequentialGroup()
                        .addComponent(BackProm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addComponent(SelectRow)
                        .addGap(18, 18, 18)
                        .addComponent(Revert)
                        .addGap(18, 18, 18)
                        .addComponent(Apply)
                        .addGap(18, 18, 18)
                        .addComponent(Edit)
                        .addGap(18, 18, 18)
                        .addComponent(Create))
                    .addComponent(ScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditPromotionsLayout.createSequentialGroup()
                        .addComponent(Search1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SearchField1)))
                .addContainerGap())
        );
        EditPromotionsLayout.setVerticalGroup(
            EditPromotionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditPromotionsLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(EditPromotionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EditPromotionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EditPromotionsLayout.createSequentialGroup()
                        .addComponent(BackProm)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(EditPromotionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Create, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Apply)
                        .addComponent(Revert)
                        .addComponent(SelectRow)))
                .addContainerGap())
        );

        Tabs.addTab("Promotions", EditPromotions);

        BackTrend.setText("Back");
        BackTrend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackTrendActionPerformed(evt);
            }
        });

        CD.setText("Current Date: MM/DD/YYYY");

        Month.setText("Month");

        Date.setText("Date");

        Year.setText("Year");

        Period.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 day", "1 week", "2 weeks", "1 month", "2 months", "3 months" }));
        Period.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PeriodActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Period Below");

        Most.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "SKU", "Gross", "Net", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Most.setAutoscrolls(false);
        SPMost.setViewportView(Most);

        Least.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "SKU", "Gross", "Net", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Least.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        Least.setAutoscrolls(false);
        Least.setMinimumSize(new java.awt.Dimension(60, 190));
        SPLeast.setViewportView(Least);

        Most10.setText("10 Most Profitable Items");

        Least10.setText("10 Least Profitable Items");

        SetDate.setText("Set Date");
        SetDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewTrendsLayout = new javax.swing.GroupLayout(ViewTrends);
        ViewTrends.setLayout(ViewTrendsLayout);
        ViewTrendsLayout.setHorizontalGroup(
            ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewTrendsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackTrend)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ViewTrendsLayout.createSequentialGroup()
                .addGroup(ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewTrendsLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ViewTrendsLayout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(Most10))
                            .addGroup(ViewTrendsLayout.createSequentialGroup()
                                .addComponent(Month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(SetDate)
                                    .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(Year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(CD)))
                    .addGroup(ViewTrendsLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(SPMost, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(Period, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SPLeast, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Least10))
                .addGap(42, 42, 42))
        );
        ViewTrendsLayout.setVerticalGroup(
            ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewTrendsLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CD))
                .addGap(18, 18, 18)
                .addGroup(ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Month, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Year, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Period, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SetDate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewTrendsLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(Least10, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Most10, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ViewTrendsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SPLeast, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(SPMost, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(BackTrend, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Tabs.addTab("Trends", ViewTrends);

        ItemCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SKU", "Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CartPane.setViewportView(ItemCart);

        Place.setText("Place Order");
        Place.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlaceActionPerformed(evt);
            }
        });

        Remove.setText("Remove Item");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        BackCart.setText("Back");
        BackCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackCartActionPerformed(evt);
            }
        });

        RTotal.setText("Running Total:");

        CartLabel.setText("My Cart");

        Total.setText("$0");

        ErrorL.setText("jLabel1");

        javax.swing.GroupLayout CartLayout = new javax.swing.GroupLayout(Cart);
        Cart.setLayout(CartLayout);
        CartLayout.setHorizontalGroup(
            CartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CartLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CartPane, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                    .addGroup(CartLayout.createSequentialGroup()
                        .addComponent(CartLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(CartLayout.createSequentialGroup()
                        .addComponent(BackCart)
                        .addGap(18, 18, 18)
                        .addComponent(RTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Total)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ErrorL)
                        .addGap(18, 18, 18)
                        .addComponent(Remove)
                        .addGap(18, 18, 18)
                        .addComponent(Place)))
                .addContainerGap())
        );
        CartLayout.setVerticalGroup(
            CartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CartLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(CartLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CartPane, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 27, Short.MAX_VALUE)
                .addGroup(CartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Place)
                    .addComponent(Remove)
                    .addComponent(BackCart)
                    .addComponent(RTotal)
                    .addComponent(Total)
                    .addComponent(ErrorL))
                .addContainerGap())
        );

        Tabs.addTab("Cart", Cart);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TrendsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrendsButtonActionPerformed
        // TODO add your handling code here:
        Tabs.setSelectedIndex(3);
    }//GEN-LAST:event_TrendsButtonActionPerformed

    private void PromotionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PromotionsButtonActionPerformed
        // TODO add your handling code here:
        Tabs.setSelectedIndex(2);
        SearchField1.requestFocus();
    }//GEN-LAST:event_PromotionsButtonActionPerformed

    private void InventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InventoryButtonActionPerformed
        // TODO add your handling code here:
        Tabs.setSelectedIndex(1);
        SearchField.requestFocus();
    }//GEN-LAST:event_InventoryButtonActionPerformed

    private void BackInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackInvActionPerformed
        // TODO add your handling code here:
        Tabs.setSelectedIndex(0);
    }//GEN-LAST:event_BackInvActionPerformed

    private void BackPromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackPromActionPerformed
        // TODO add your handling code here:
         Tabs.setSelectedIndex(0);
    }//GEN-LAST:event_BackPromActionPerformed

    private void BackTrendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackTrendActionPerformed
        // TODO add your handling code here:
         Tabs.setSelectedIndex(0);
    }//GEN-LAST:event_BackTrendActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        tableSearch();
    }//GEN-LAST:event_SearchActionPerformed

    private void SearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchTableMouseClicked
        // TODO add your handling code here:
        int index = SearchTable.getSelectedRow();
        TableModel model = SearchTable.getModel();
        String sku = model.getValueAt(index, 0).toString();
        String name = model.getValueAt(index, 1).toString();
        String description = model.getValueAt(index, 2).toString();
        String weight = model.getValueAt(index, 3).toString();
        String cost = model.getValueAt(index, 4).toString();
        
        inventory.setVisible(true);
        inventory.pack();
        inventory.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        inventory.AIT1.setText(name);
        inventory.AIT2.setText(description);
        inventory.AIT3.setText(weight);
        inventory.AIT4.setText(cost);
        
        if(user == 1)
            inventory.AIT4.setEditable(false);
        
        String query = "SELECT COUNT(*) FROM Inventory WHERE SKU = '"+ sku +"'"
                + "AND StatusID = 1 LIMIT 1;";
        
        String promotion = "SELECT COUNT(*) FROM ItemToPromotion \n" +
                "JOIN Promotion ON Promotion.ID = promotionid\n" +
                "WHERE SKU = '"+ sku +"' AND '"+ codate 
                +"' <= EndDate AND '"+ codate +"' >= StartDate;";
        
        
        
        try (ResultSet rs = dbHandler.executeQuery(query)) {
            int count = 0;
            if(rs.next())
                count = rs.getInt("count");
            inventory.Amount.setText("" + count);
        }
        catch (SQLException ex){
            ex.printStackTrace();
        }
        try (ResultSet rs = dbHandler.executeQuery(promotion)) {
            int count = 0;
            if(rs.next())
                count = rs.getInt("count");
            if(count != 0) inventory.Promotion.setText("Promotion: Active");
            else inventory.Promotion.setText("Promotion: Inactive");
        }
        catch (SQLException ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_SearchTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        manualSamuel();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search1ActionPerformed
        // TODO add your handling code here:
        promoSearch();
    }//GEN-LAST:event_Search1ActionPerformed

    private void CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateActionPerformed
        // TODO add your handling code here:
        //0 is create, 1 is edit, 2 is apply
        newpromo.create(0);
    }//GEN-LAST:event_CreateActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //massInsert();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        // TODO add your handling code here:
        int index = SearchTable1.getSelectedRow();
        if(index != -1){
            TableModel model = SearchTable1.getModel();
            String name = model.getValueAt(index, 0).toString();
            String description = model.getValueAt(index, 1).toString();
            String sdate = model.getValueAt(index, 2).toString();
            String edate = model.getValueAt(index, 3).toString();
            String discount = model.getValueAt(index, 4).toString();
            SelectRow.setVisible(false);
            
            String[] stokens = sdate.split("-");
            String[] etokens = edate.split("-");
            int i = 0;
            for (String token : stokens) {
                switch (i) {
                    case 0 -> newpromo.SYear.setText(token);
                    case 1 -> newpromo.SMonth.setText(token);
                    case 2 -> newpromo.SDate.setText(token);
                }
                i++;
            }
            i = 0;
            for (String token : etokens) {
                switch (i) {
                    case 0 -> newpromo.EYear.setText(token);
                    case 1 -> newpromo.EMonth.setText(token);
                    case 2 -> newpromo.EDate.setText(token);
                }
                i++;
            }
            newpromo.Name.setText(name);
            newpromo.Description.setText(description);
            newpromo.Discount.setText(discount);
            
            
            String query = "SELECT ID FROM Promotion WHERE Description = '"
                    + description +"';";
            try (ResultSet rs = dbHandler.executeQuery(query)) {
                int pid = 0;
                if(rs.next()) pid = rs.getInt("id");
                newpromo.create(pid);
            } catch (SQLException ex){
                ex.printStackTrace();
            }
            
        }
        else {
            SelectRow.setText("Select a row above to edit");
            SelectRow.setVisible(true);
        }
    }//GEN-LAST:event_EditActionPerformed

    private void ApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyActionPerformed
        // TODO add your handling code here:
        int index = SearchTable1.getSelectedRow();
        if(index != -1){
            TableModel model = SearchTable1.getModel();
            String description = model.getValueAt(index, 1).toString();
            SelectRow.setVisible(false);
            String query = "SELECT ID FROM Promotion WHERE Description = '"
                    + description +"';";
            try (ResultSet rs = dbHandler.executeQuery(query)) {
                int pid;
                if(rs.next()) pid = rs.getInt("id");
                else return;
                String size = "SELECT COUNT(*) FROM Catalog Left JOIN ItemToPromotion "
                            + "ON (ItemToPromotion.SKU = Catalog.SKU) WHERE "
                        + "PromotionID != " + pid +" OR PromotionID is null;";
                try (ResultSet rs2 = dbHandler.executeQuery(size)) {
                    int arrsize;
                    if(rs2.next())
                        arrsize = rs2.getInt("count");
                    else return;
                    String itop = "SELECT Catalog.SKU, Name FROM Catalog Left "
                            + "JOIN ItemToPromotion ON (ItemToPromotion.SKU = "
                            + "Catalog.SKU) WHERE PromotionID != " + pid + 
                            " OR PromotionID IS NULL ORDER BY Catalog.SKU;";
                    try (ResultSet rs3 = dbHandler.executeQuery(itop)) {
                        int arrindex = 0;
                        String skuarray[] = new String [arrsize];
                        String namearray[] = new String [arrsize];
                        while(rs3.next()){
                            skuarray[arrindex] = rs3.getString("sku");
                            namearray[arrindex] = rs3.getString("name");
                            arrindex++;
                        }
                        apply.set(pid, skuarray, namearray, description, 0);
                        
                    } catch (SQLException ex){
                    ex.printStackTrace();
                    }
                } catch (SQLException ex){
                ex.printStackTrace();
                }
                
            } catch (SQLException ex){
                ex.printStackTrace();
            }
        }
        else {
            SelectRow.setText("Select a row above to apply");
            SelectRow.setVisible(true);
        }
        
    }//GEN-LAST:event_ApplyActionPerformed

    private void RevertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RevertActionPerformed
        // TODO add your handling code here:
        int index = SearchTable1.getSelectedRow();
        if(index != -1){
            TableModel model = SearchTable1.getModel();
            String description = model.getValueAt(index, 1).toString();
            SelectRow.setVisible(false);
            String query = "SELECT ID FROM Promotion WHERE Description = '"
                    + description +"';";
            try (ResultSet rs = dbHandler.executeQuery(query)) {
                int pid;
                if(rs.next()) pid = rs.getInt("id");
                else return;
                String size = "SELECT COUNT(*) FROM Catalog Left "
                            + "JOIN ItemToPromotion ON (ItemToPromotion.SKU = "
                            + "Catalog.SKU) WHERE PromotionID = " + pid +";";
                try (ResultSet rs2 = dbHandler.executeQuery(size)) {
                    int arrsize;
                    if(rs2.next())
                        arrsize = rs2.getInt("count");
                    else return;
                    String itop = "SELECT Catalog.SKU, Name FROM Catalog Left "
                            + "JOIN ItemToPromotion ON (ItemToPromotion.SKU = "
                            + "Catalog.SKU) WHERE PromotionID = " + pid 
                            + "ORDER BY Catalog.SKU;";
                    try (ResultSet rs3 = dbHandler.executeQuery(itop)) {
                        int arrindex = 0;
                        String skuarray[] = new String [arrsize];
                        String namearray[] = new String [arrsize];
                        while(rs3.next()){
                            skuarray[arrindex] = rs3.getString("sku");
                            namearray[arrindex] = rs3.getString("name");
                            arrindex++;
                        }
                        apply.set(pid, skuarray, namearray, description, 1);
                    } catch (SQLException ex){
                    ex.printStackTrace();
                    }
                } catch (SQLException ex){
                ex.printStackTrace();
                }
                
            } catch (SQLException ex){
                ex.printStackTrace();
            }
            
        }
        else {
            SelectRow.setText("Select a row above to revert");
            SelectRow.setVisible(true);
        }
    }//GEN-LAST:event_RevertActionPerformed

    private void CartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CartButtonActionPerformed
        // TODO add your handling code here:
        Tabs.setSelectedIndex(2);
    }//GEN-LAST:event_CartButtonActionPerformed

    private void BackCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackCartActionPerformed
        // TODO add your handling code here:
        Tabs.setSelectedIndex(0);
    }//GEN-LAST:event_BackCartActionPerformed

    private void PeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PeriodActionPerformed
        // TODO add your handling code here:
        dates();
    }//GEN-LAST:event_PeriodActionPerformed

    private void SetDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetDateActionPerformed
        // TODO add your handling code here:
        dates();
    }//GEN-LAST:event_SetDateActionPerformed

    private void PlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlaceActionPerformed
        // TODO add your handling code here:
        
        String cidquery = "SELECT ID FROM Customer WHERE Email = '"+ userEmail +"'";
        try(ResultSet rs = dbHandler.executeQuery(cidquery)){
            int cid = 0;
            if(rs.next())
                cid = rs.getInt("ID");
            String coupdate = "INSERT INTO COrder (CustomerID, Number, Date) "
                    + "VALUES ("+ cid +", '"+ conumber +"', '"+ codate +"') returning *";
            try(ResultSet rs2 = dbHandler.executeQuery(coupdate)){
                    if(rs2.next()) {
                        String ordid = "SELECT ID FROM COrder WHERE Number = '"+ conumber +"'";
                        try(ResultSet rs3 = dbHandler.executeQuery(ordid)){
                            int id = 0;
                            if(rs3.next())
                                id = rs3.getInt("id");
                            int rows = ItemCart.getRowCount();
                            DefaultTableModel model = (DefaultTableModel) ItemCart.getModel();
                            for(int i = 0; i < rows; i++){
                                String squantity = model.getValueAt(0, 2).toString();
                                String sku = model.getValueAt(0, 0).toString();
                                int quantity = Integer.parseInt(squantity);
                                String odiupdate = "INSERT INTO OrderItem (OrderID, SKU, Quantity) "
                                    + "VALUES ("+ id +", '"+ sku +"', "+ quantity +") RETURNING *;";
                                dbHandler.executeQuery(odiupdate);
                                model.removeRow(0);
                            }
                        Total.setText("$0");
                        String invupdate = "UPDATE Inventory SET StatusID = 2, SoldDate = '"+ codate +"' "
                                    + "WHERE StatusID = 4 RETURNING *;";
                        dbHandler.executeQuery(invupdate);
                        ErrorL.setText("Order Placed Successfully");
                        }catch (SQLException ex) {
                            ex.printStackTrace();
                        }
                    } 
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_PlaceActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        // TODO add your handling code here:
        int index = ItemCart.getSelectedRow();
        if(index != -1){
            DefaultTableModel model = (DefaultTableModel) ItemCart.getModel();
            String sku = model.getValueAt(index, 0).toString();
            String squantity = model.getValueAt(index, 2).toString();
            String scost = model.getValueAt(index, 3).toString();
            int quantity = Integer.parseInt(squantity);
            double cost = Double.parseDouble(scost);
            
            String query = "UPDATE Inventory SET StatusID = 1 WHERE "
                            + "sku = '"+ sku +"' AND SoldDate IS NULL and id = (select id from "
                            + "inventory where sku = '" + sku + "' and solddate "
                            + "is null and statusid = 4 order by id limit 1) Returning *;";
            try{
                for(int i = 0; i < quantity; i++)
                    dbHandler.executeQuery(query);
                String stotal = Total.getText().replace("$", "");
                double total = Double.parseDouble(stotal);
                total -= cost * quantity;
                DecimalFormat df = new DecimalFormat("#.##");
                Total.setText("$" + df.format(total));
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            model.removeRow(index);
        } else {
            ErrorL.setText("Select a row above to revert");
            ErrorL.setVisible(true);
        }
    }//GEN-LAST:event_RemoveActionPerformed

    public void dates(){
        String month = Month.getText();
        String date = Date.getText();
        String year = Year.getText();
        
        if (month.matches("\\d+") && date.matches("\\d+") && year.matches("\\d+")) {
            if(month.length() > 2 || month.length() < 2){ 
                CD.setText("Month out of bounds");
                return;
            }
            else if(date.length() > 2 || date.length() < 2) {
                CD.setText("Date out of bounds");
                return;
            }
            else if(year.length() > 4 || year.length() < 4) {
                CD.setText("Year out of bounds");
                return;
            }
            else if(year.compareTo("2022") < 0) {
                CD.setText("Year is less than 2022");
                return;
            }
            else if(year.compareTo("2023") > 0) {
                CD.setText("Year is greater than 2023");
                return;
            }
        } else{
            if(!month.matches("\\d+")) CD.setText("Month cannot have a character");
            else if(!date.matches("\\d+")) CD.setText("Date cannot have a character");
            else if(!year.matches("\\d+")) CD.setText("Year cannot have a character");
            return;
        }
        CD.setText("Current Date: " + month + "/" + date + "/" + year);
        int index = Period.getSelectedIndex();
        String period = Period.getItemAt(index);
        String codate = year + "-" + month + "-" + date;
        String query = "SELECT ('"+ codate +"'::date - '"+ period +"'::interval)::date as Beginning;";
        
        try (ResultSet rs = dbHandler.executeQuery(query)) {
            String edate = "";
            if(rs.next())
                edate = rs.getString("beginning");
            String mostquery = """
                                SELECT table1.sku, cost * count as gross, vendorprice * count as cost, profit * count::decimal AS profit
                                FROM (
                                SELECT inventory.sku, cost, vendorprice, COUNT(inventory.sku), cost - vendorprice AS profit
                                FROM inventory
                                JOIN catalog ON (catalog.sku = inventory.sku)
                                WHERE solddate IS NOT NULL AND solddate <= '""" + codate +
                                "'::date " +
                                "AND solddate >= '" + edate +
                                "'::date" +
                                " GROUP BY inventory.sku, cost, vendorprice" +
                                ") AS table1\n" +
                                "ORDER BY profit DESC\n" +
                                "LIMIT 10;";
            System.out.println(mostquery);
            String leastquery = """
                                SELECT table1.sku, cost * count as gross, vendorprice * count as cost, profit * count::decimal AS profit
                                FROM (
                                SELECT inventory.sku, cost, vendorprice, COUNT(inventory.sku), cost - vendorprice AS profit
                                FROM inventory
                                JOIN catalog ON (catalog.sku = inventory.sku)
                                WHERE solddate IS NOT NULL AND solddate <= '""" + codate +
                                "'::date " +
                                "AND solddate >= '" + edate +
                                "'::date" +
                                " GROUP BY inventory.sku, cost, vendorprice" +
                                ") AS table1\n" +
                                "ORDER BY profit ASC\n" +
                                "LIMIT 10;";
            try (ResultSet mq = dbHandler.executeQuery(mostquery)) {
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("SKU");
                model.addColumn("Gross");
                model.addColumn("Net");
                model.addColumn("Cost");
                while(mq.next()){
                    String sku = mq.getString("sku");
                    String gross = mq.getString("gross");
                    String profit = mq.getString("profit");
                    String cost = mq.getString("cost");
                    model.addRow(new Object[]{sku, gross, profit, cost});
                }
                Most.setModel(model);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            try (ResultSet lq = dbHandler.executeQuery(leastquery)) {
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("SKU");
                model.addColumn("Gross");
                model.addColumn("Net");
                model.addColumn("Cost");
                while(lq.next()){
                    String sku = lq.getString("sku");
                    String gross = lq.getString("gross");
                    String profit = lq.getString("profit");
                    String cost = lq.getString("cost");
                    model.addRow(new Object[]{sku, gross, profit, cost});
                }
                Least.setModel(model);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            
        } catch (SQLException ex) {
            CD.setText("Date out of range");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GroceryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GroceryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GroceryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GroceryGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
//        launch.setVisible(true);
//        launch.pack();launch
//        launch.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GroceryGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Apply;
    private javax.swing.JButton BackCart;
    private javax.swing.JButton BackInv;
    private javax.swing.JButton BackProm;
    private javax.swing.JButton BackTrend;
    private javax.swing.JLabel CD;
    private javax.swing.JLabel CDate;
    private javax.swing.JPanel Cart;
    private javax.swing.JButton CartButton;
    private javax.swing.JLabel CartLabel;
    private javax.swing.JScrollPane CartPane;
    private javax.swing.JButton Create;
    private javax.swing.JTextField Date;
    private javax.swing.JButton Edit;
    private javax.swing.JPanel EditInventory;
    private javax.swing.JPanel EditPromotions;
    private javax.swing.JLabel ErrorL;
    private javax.swing.JPanel Home;
    private javax.swing.JButton InventoryButton;
    private static javax.swing.JTable ItemCart;
    private javax.swing.JLabel Launch;
    private javax.swing.JTable Least;
    private javax.swing.JLabel Least10;
    private javax.swing.JTextField Month;
    private javax.swing.JTable Most;
    private javax.swing.JLabel Most10;
    private javax.swing.JComboBox<String> Period;
    private javax.swing.JButton Place;
    private javax.swing.JButton PromotionsButton;
    private javax.swing.JLabel RTotal;
    private javax.swing.JButton Remove;
    private javax.swing.JButton Revert;
    private javax.swing.JScrollPane SPLeast;
    private javax.swing.JScrollPane SPMost;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JScrollPane ScrollPane1;
    private javax.swing.JButton Search;
    private javax.swing.JButton Search1;
    private javax.swing.JTextField SearchField;
    private javax.swing.JTextField SearchField1;
    private javax.swing.JTable SearchTable;
    private javax.swing.JTable SearchTable1;
    public static javax.swing.JLabel SelectRow;
    private javax.swing.JButton SetDate;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JLabel Title;
    private static javax.swing.JLabel Total;
    private javax.swing.JButton TrendsButton;
    private javax.swing.JPanel ViewTrends;
    private javax.swing.JTextField Year;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    
    public ResultSet selectName(String name){
        String query = "SELECT * FROM Catalog WHERE NAME ILIKE '%" + name + "%';";
        
        //System.out.println("\nTESTING\n");
        // Process the results...
        try (ResultSet rs = dbHandler.executeQuery(query)) {
            // Process the results...
            return rs;
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return null;
    }
    
    public void tableSearch(){
        String query = "SELECT * FROM Catalog WHERE NAME ILIKE '%" + SearchField.getText() + "%';";
        //System.out.println("\nTESTING\n");
        // Process the results...
        try (ResultSet rs = dbHandler.executeQuery(query)) {
            // Process the results...
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("SKU");
            model.addColumn("Name");
            model.addColumn("Description");
            model.addColumn("Weight");
            model.addColumn("Cost");
            model.addColumn("BarCode");

            while (rs.next()) {
                String sku = rs.getString("sku");
                String name = rs.getString("name");
                String description = rs.getString("description");
                String weight = rs.getString("weight");
                double cost = rs.getDouble("cost");
                String barcode = rs.getString("barcode");
                model.addRow(new Object[]{sku, name, description, weight, cost, barcode});
            }

            SearchTable.setModel(model);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    public static int confirmPressed(String name, double cost, int amount){
        String query = "SELECT SKU FROM Catalog WHERE NAME ILIKE '%" + name + "%';";
        
        try (ResultSet rs = dbHandler.executeQuery(query)) {
            // Process the results...
            String sku;
            if(rs.next())
                sku = rs.getString("sku");
            else return 1;
            System.out.println(query);
            String updQuery = "UPDATE Inventory SET StatusID = 4 WHERE "
                    + "sku = '"+ sku +"' AND SoldDate IS NULL and id = (select id from "
                            + "inventory where sku = '" + sku + "' and solddate "
                            + "is null and statusid = 1 order by id limit 1) Returning *;";
            
            for(int i = 0; i < amount; i++)
                dbHandler.executeQuery(updQuery);
            
            DefaultTableModel model = (DefaultTableModel) ItemCart.getModel();
            model.addRow(new Object[]{sku, name, amount, cost});
            
            String stotal = Total.getText().replace("$", "");
            double total = Double.parseDouble(stotal);
            total += cost * amount;
            DecimalFormat df = new DecimalFormat("#.##");
            Total.setText("$" + df.format(total));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return 0;
    }
    
    //inserting every item 10 at a time
    public static void massInsert(){
        String skuquery = "select sku, cost from catalog;";
        
        try(ResultSet rs = dbHandler.executeQuery(skuquery)){
            
            
            while(rs.next()){
                String sku = rs.getString("sku");
                double cost = rs.getDouble("cost");
                for(int i = 0; i < 10; i++){
                    String mi = "INSERT INTO Inventory(sku, statusid, salesprice, solddate) "
                            + "VALUES('" + sku + "', 1, "+ cost +", null) returning *;";
                    dbHandler.executeQuery(mi);
                }
            }
            
        } catch (SQLException ex){
            ex.printStackTrace();
        }
    }
    
    public static int promoApplied(int pid, String sku, int type){
        String query = "Insert Into ItemToPromotion (SKU, PromotionID)"
                + "VALUES ('"+ sku +"', "+ pid +") returning *;";
        
        String dquery = "SELECT Discount FROM Promotion WHERE ID = "+ pid +";";
        String sprice = "SELECT AVG(SalesPrice) FROM Inventory WHERE SKU = '"+ sku +"'";
        if(type == 1){
            query = "DELETE FROM ItemToPromotion WHERE SKU = '"+ sku +
                    "' AND PromotionID = "+ pid +" returning *;";
            sprice = "SELECT Cost FROM Catalog WHERE SKU = '"+ sku +"';";
        }
        try(ResultSet rs = dbHandler.executeQuery(query)){
            if(rs.next()){
                SelectRow.setText("Promotion Applied");
                SelectRow.setVisible(false);
            }
            try(ResultSet rs2 = dbHandler.executeQuery(dquery)){
                double discount;
                if(rs2.next()){
                    discount = rs2.getDouble("Discount");
                } else return -1;
                try(ResultSet rs3 = dbHandler.executeQuery(sprice)){
                    double price;
                    if(rs3.next()){
                        if(type == 1) price = rs3.getDouble("Cost");
                        else price = rs3.getDouble("avg");
                    } else return -1;
                    if(type != 1)
                        price = price * (1 - discount);
                    String apply = "UPDATE Inventory SET SalesPrice = "+ price +" "
                            + "WHERE SKU = '"+ sku +"' AND SoldDate IS Null Returning *";
                    if(type == 1)
                        apply = "UPDATE Inventory SET SalesPrice = "+ price +" "
                            + "WHERE SKU = '"+ sku +"' AND SoldDate IS Null Returning *";
                    try(ResultSet rs4 = dbHandler.executeQuery(apply)){
                        if(rs4.next())
                            return 0;
                        else return -1;
                    } catch (SQLException ex){
                        ex.printStackTrace();
                    }
                } catch (SQLException ex){
                    ex.printStackTrace();
                }
            } catch (SQLException ex){
                ex.printStackTrace();
            }
            return -1;
        } catch (SQLException ex){
            ex.printStackTrace();
        }
        return -1;
    }
    
    public static void manualSamuel() {
        String query1 = "select sku, date, quantity, 2 as statusid from "
                + "orderitem left join corder on corder.id = orderid order by sku;";
//        try {
//            dbHandler.executeQuery("Begin;");
//        } catch (SQLException ex) {
//            Logger.getLogger(GroceryGUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
//System.out.println("OUT");
        try(ResultSet rs = dbHandler.executeQuery(query1)){
            
            while(rs.next()){
                String sku = rs.getString("sku");
                String date = rs.getString("date");
                int quantity = rs.getInt("quantity");
                int statusid = rs.getInt("statusid");
                
                for(int i = 0; i < quantity; i++){
                    //System.out.println("IN");
                    String query2 = "Update inventory "
                            + "set statusid = " + statusid + ", solddate = '" + date +"' "
                            + "WHERE SKU = '" + sku + "' and id = (select id from "
                            + "inventory where sku = '" + sku + "' and solddate "
                            + "is null order by id limit 1) Returning *;";
                    dbHandler.executeQuery(query2);
                }
            }
        } catch (SQLException ex){
            ex.printStackTrace();
        }
        
        try(ResultSet rs = dbHandler.executeQuery("SELECT * FROM Inventory where statusid = 2 "
                + "and solddate is not null;");){
            while(rs.next()){
                String sku = rs.getString("sku");
                String date = rs.getString("solddate");
                int id = rs.getInt("id");
                int statusid = rs.getInt("statusid");
                System.out.println(id + " | " + sku + " | " + statusid + " | " + date);
            }
            
        } catch (SQLException ex){
            ex.printStackTrace();
        }
//        try {
//            dbHandler.executeQuery("Rollback;");
//        } catch (SQLException ex) {
//            Logger.getLogger(GroceryGUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }
    
    public static void setPromotion(String name, String description, String sdate, String edate, double discount, int pid){
        
        String query = "Insert Into Promotion (Name, Description, StartDate, EndDate, Discount) "
                + "VALUES ('"+ name +"', '"+ description +"', '"+ sdate +"', '"
                + edate +"', " + discount + ") returning *;";
        if(pid != 0)
            query = "UPDATE Promotion SET Name = '"+ name +"', Description = '"
                    + description +"', StartDate = '"+ sdate +"', EndDate = '"
                + edate +"', Discount = "+ discount +" WHERE ID = "+ pid +" returning *;";
        try(ResultSet rs = dbHandler.executeQuery(query)){
            
        } catch (SQLException ex){
            ex.printStackTrace();
        }
    }
    
    public void promoSearch(){
        String query = "SELECT * FROM Promotion WHERE NAME ILIKE '%" + SearchField1.getText() + "%';";
        //System.out.println("\nTESTING\n");
        // Process the results...
        try (ResultSet rs = dbHandler.executeQuery(query)) {
            // Process the results...
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Name");
            model.addColumn("Description");
            model.addColumn("StartDate");
            model.addColumn("EndDate");
            model.addColumn("Discount");

            while (rs.next()) {
                String name = rs.getString("name");
                String description = rs.getString("description");
                String sd = rs.getString("startdate");
                String ed = rs.getString("enddate");
                double discount = rs.getDouble("discount");
                model.addRow(new Object[]{name, description, sd, ed, discount});
            }

            SearchTable1.setModel(model);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    public void calcProfits(){
        String pquery = "SELECT ";
    }
    
    public int customerInfo(String email, String ln, int type){
        String query = "SELECT * from Customer WHERE Email ILIKE '"+ email +"' "
                + "AND LastName ILIKE '"+ ln +"';";
        
        try (ResultSet rs = dbHandler.executeQuery(query)) {
            if(rs.next()){
                if(type == 0){
                    userEmail = email;
                    return 0;
                }
                return -1;
            } else {
                if(type == 0)
                    return -1;
                String query2 = "SELECT Email from Customer WHERE Email ILIKE '"+ email +"' ";
                try (ResultSet rs2 = dbHandler.executeQuery(query2)) {
                    if(rs2.next()) return -2;
                }catch (SQLException ex) {
                    ex.printStackTrace();
                }
                userEmail = email;
                return 0;
            } 
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return -1;
    }
    
    public void signIn(int access, int type, String ln){
        user = access;
        
        if(user == 1){
            Revert.setVisible(false);
            Apply.setVisible(false);
            Edit.setVisible(false);
            Create.setVisible(false);
            inventory.VP.setVisible(false);
            Tabs.removeTabAt(2);
            Tabs.removeTabAt(2);
            TrendsButton.setVisible(false);
            PromotionsButton.setVisible(false);
            InventoryButton.setText("View Inventory");
        } else {
            Tabs.removeTabAt(4);
            CartButton.setVisible(false);
        }
        
        
        jButton1.setVisible(false);
        jButton2.setVisible(false);
        
        String query = "SELECT UPPER(SUBSTRING(REPLACE(gen_random_uuid()::text, '-', ''), 1, 15));";
        
        try(ResultSet rs = dbHandler.executeQuery(query)){
            String orderNum = "fail";
            if(rs.next())
                orderNum = rs.getString("upper");
            conumber = orderNum;
            Launch.setVisible(true);
            if(type == 1) Launch.setText("Account Created");
            else Launch.setText("Sign in Completed");
        } catch (SQLException ex){
            ex.printStackTrace();
        }
        
        String datequery = "SELECT date, COUNT(*) FROM Corder WHERE Date = "
                + "(SELECT Date FROM Corder ORDER BY Date DESC LIMIT 1) "
                + "GROUP BY DATE ORDER BY DATE DESC LIMIT 1;";
        try(ResultSet rs = dbHandler.executeQuery(datequery)){
            int count = 0;
            String date = "2023-01-01";
            if(rs.next()){
                count = rs.getInt("count");
                date = rs.getString("date");
            }
            if(count >= 3){
                LocalDate ndate = LocalDate.parse(date); // parse the date string to a LocalDate object
                ndate = ndate.plusDays(1); // increment the date by 1 day
                date = ndate.toString();
            }
            codate = date;   
            CDate.setText("Current Date: " + codate);
        } catch (SQLException ex){
            ex.printStackTrace();
        }
        if(type == 1){
            String person = "INSERT INTO Customer (LastName, Email) "
                    + "VALUES ('"+ ln +"', '"+ userEmail +"') Returning *;";
            try(ResultSet rs = dbHandler.executeQuery(person)){

            } catch (SQLException ex){
                ex.printStackTrace();
            }
        }
        
        System.out.println("User: " + user + " Email: " + userEmail + " CONumber: " + conumber + " Date: " + codate);
        this.setVisible(true);
    }
}